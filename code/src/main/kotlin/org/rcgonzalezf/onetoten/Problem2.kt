package org.rcgonzalezf.onetoten

import java.math.BigInteger

/**
 *
 * https://projecteuler.net/problem=2
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 *
 */
class Problem2 {

    fun solve(fibonacci: Int, maxValue: Int = 4000000): BigInteger {

        // the list is based on index 0, so we add one
        val fibonacciValues = fibonacci().take(fibonacci + 1).toList()
        val max = BigInteger.valueOf(maxValue.toLong())

        return fibonacciValues
                .filter { filterCriteria(it.second, max) }
                .map { it.second }
                .fold(BigInteger.ZERO, BigInteger::add)
    }

    /**
     * Make sure that value doesn't exceed the max value and it's an even number.
     */
    fun filterCriteria(value: BigInteger, max: BigInteger): Boolean {
        val two = BigInteger("2")
        return value.compareTo(max) == -1 && value.mod(two).equals(BigInteger.ZERO)
    }

    // based on https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/generate-sequence.html
    fun fibonacci(): Sequence<Pair<BigInteger, BigInteger>> {
        // fibonacci terms
        // 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, ...
        return generateSequence(Pair(BigInteger.ZERO, BigInteger.ONE),
                { Pair(it.second, it.first.add(it.second)) })
    }

}
